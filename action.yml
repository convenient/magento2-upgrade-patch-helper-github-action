name: 'Magento2 Upgrade Patch Helper'
description: 'Run the Magento2 Upgrade Patch Helper'
inputs:
  working-dir:
    description: "The current working directory, defaults to '.'"
    required: true
    default: ""
    type: string
  vendor-filter:
    description: "Pipe separated list of vendors that will not trigger the tool"
    required: false
    type: string
  with-gui-artifacts:
    description: "Set this flag to upload artifacts for https://github.com/elgentos/magento2-upgrade-gui"
    type: boolean
    required: true
    default: false
  pr-comment-when-nothing-to-scan:
    description: "When set to true a comment will be added to the PR when there are no magento2 dependencies to scan"
    type: boolean
    required: true
    default: false
  pr-comment-when-completed:
    description: "When set to true a comment will be added to the PR with a summary of the output"
    type: boolean
    required: true
    default: true
  upgrade-patch-helper-github-url:
    description: "The location of the magento2-upgrade-patch-helper tool (without a trailing slash)"
    type: string
    required: true
    default: 'https://github.com/AmpersandHQ/ampersand-magento2-upgrade-patch-helper'

runs:
  using: "composite"
  steps:

    - name: Update entrypoint.sh information
      shell: bash
      run: |
        ls -l ${{ github.action_path }}/Dockerfiles/upgrade-patch-helper
        chmod +x ${{ github.action_path }}/Dockerfiles/upgrade-patch-helper/entrypoint.sh
    
    - name: Check if SHOULD_RUN_UPGRADE_HELPER
      uses: docker://convenient/magento2-upgrade-patch-helper-github-action:should-we-execute-2024-04-07
      env:
        WORKING_DIRECTORY: ${{ inputs.working-dir }}
        VENDOR_FILTER: ${{ inputs.vendor-filter }}

    - name: Comment on pull request [SHOULD_RUN=no]
      if: ${{  env.SHOULD_RUN_UPGRADE_HELPER == 'no' && inputs.pr-comment-when-nothing-to-scan == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: fs.readFileSync('./${{ inputs.working-dir }}/output-not-needed.md', 'utf8')
          });

    - name: Run upgrade patch helper [SHOULD_RUN=yes]
      if: env.SHOULD_RUN_UPGRADE_HELPER == 'yes'
      shell: bash
      run: |
        /usr/bin/docker run --name magento2upgradepatchhelpergithubaction -v "${{ github.action_path }}/Dockerfiles/upgrade-patch-helper/entrypoint.sh":"/entrypoint.sh" --workdir /github/workspace --rm -e REPO_URL=${{ inputs.upgrade-patch-helper-github-url }} -e WORKING_DIRECTORY=${{ inputs.working-dir }} -e GITHUB_ACTIONS=true -e CI=true -e "GITHUB_RUN_ID" -e "GITHUB_REPOSITORY" -e "GITHUB_SERVER_URL" -e "GITHUB_HEAD_REF" -e "GITHUB_BASE_REF" -v "$(pwd)":"/github/workspace" convenient/magento2-upgrade-patch-helper-github-action:upgrade-patch-helper-2024-04-09
      # Run image manually so that the pull of the large docker image is delayed or skipped when not required, pass over the necessary variables

    - name: Upload vendor_files_to_check.patch [SHOULD_RUN=yes]
      if: env.SHOULD_RUN_UPGRADE_HELPER == 'yes'
      uses: actions/upload-artifact@v4
      with:
        name: vendor_files_to_check.patch
        path: ./${{ inputs.working-dir }}/vendor_files_to_check.patch

    - name: Upload patch-helper-output.txt [SHOULD_RUN=yes]
      if: env.SHOULD_RUN_UPGRADE_HELPER == 'yes'
      uses: actions/upload-artifact@v4
      with:
        name: patch-helper-output.txt
        path: ./${{ inputs.working-dir }}/patch-helper-output.txt

    - name: Upload classmap.json [SHOULD_RUN=yes]
      if: ${{  env.SHOULD_RUN_UPGRADE_HELPER == 'yes' && inputs.with-gui-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: classmap.json
        path: ./${{ inputs.working-dir }}/classmap.json

    - name: Upload vendor.patch [SHOULD_RUN=yes]
      if: ${{  env.SHOULD_RUN_UPGRADE_HELPER == 'yes' && inputs.with-gui-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: vendor.patch
        path: ./${{ inputs.working-dir }}/vendor.patch

    - name: Prepare vendor for upload [SHOULD_RUN=yes]
      if: ${{  env.SHOULD_RUN_UPGRADE_HELPER == 'yes' && inputs.with-gui-artifacts == 'true' }}
      shell: bash
      run: |
        tar -czf ./${{ inputs.working-dir }}/vendorarchive.tar.gz ./${{ inputs.working-dir }}/vendor

    - name: Upload vendor [SHOULD_RUN=yes]
      if: ${{  env.SHOULD_RUN_UPGRADE_HELPER == 'yes' && inputs.with-gui-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: vendor.tar.gz
        path: ./${{ inputs.working-dir }}/vendorarchive.tar.gz

    - name: Create or update PR comment [SHOULD_RUN=yes]
      if: ${{  env.SHOULD_RUN_UPGRADE_HELPER == 'yes' && inputs.pr-comment-when-completed == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const {data: comments} = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.number,
          })
          const searchString = "upgrade_patch_helper_metadata_do_not_reproduce_this_string_in_another_comment_or_it_will_confuse_matters";
          const commentWithSubstring = comments.find(comment => comment.body.includes(searchString));
          if (commentWithSubstring) {
            console.log('Updating previous comment with output');
            const fs = require('fs');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fs.readFileSync('./${{ inputs.working-dir }}/output-see-previous-comment.md', 'utf8')
            });
            github.rest.issues.updateComment({
              comment_id: commentWithSubstring.id,
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fs.readFileSync('./${{ inputs.working-dir }}/patch-helper-output-formatted.md', 'utf8')
            });
          } else {
            console.log('Creating new comment');
            const fs = require('fs');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fs.readFileSync('./${{ inputs.working-dir }}/patch-helper-output-formatted.md', 'utf8')
            });
          }
